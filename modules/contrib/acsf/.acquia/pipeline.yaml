type: default
team: acsf
service: acsf-8.x-2.x

environment_image:
  file: ".acquia/Dockerfile.ci"
  context: "."

_creds: &creds
  secrets:
    - type: vault
      key: ORCA_GOOGLE_API_CLIENT_ID
      value: client_id
      path: secret/acsf/client_id
    - type: vault
      key: ORCA_GOOGLE_API_CLIENT_SECRET
      value: client_secret
      path: secret/acsf/client_secret
    - type: vault
      key: ORCA_GOOGLE_API_REFRESH_TOKEN
      value: refresh_token
      path: secret/acsf/refresh_token

_orca_steps: &orca_steps
  - steps:
      - |
        cd $ORCA_WORKSPACE
        # Insert custom scripts here.
        ../orca/bin/ci/before_install.sh
        if [ "$JENKINS_PHP_VERSION" = 8.3 ]; then

          echo 'http://dl-cdn.alpinelinux.org/alpine/v3.19/community' >> /etc/apk/repositories
          echo 'http://dl-cdn.alpinelinux.org/alpine/v3.19/main' >> /etc/apk/repositories

          # Download php83
          apk update && apk upgrade && apk add php83 php83-cli php83-common \
             php83-zip php83-gd php83-mbstring php83-tokenizer \
             php83-curl php83-bcmath php83-xml \
             php83-intl php83-sqlite3 php83-mysqli php83-dev \
             php83-gmp php83-soap php83-sockets \
             php83-phar php83-dom php83-xmlwriter php83-pdo php83-simplexml php83-ctype \
             php83-session php83-pdo_sqlite libcurl php83-pecl-apcu \
             mysql mysql-client sqlite php83-pdo_mysql php83-posix

          apk fix musl


            update-alternatives --install /usr/local/bin/php php /usr/bin/php83 82
            update-alternatives --set php /usr/bin/php83
            update-alternatives --force --all

            # Updating php-config.
            update-alternatives --install /usr/local/bin/php-config php-config /usr/bin/php-config83 82
            update-alternatives --set php-config /usr/bin/php-config83
            update-alternatives --force --all


            # Updating phpize.
            update-alternatives --install /usr/local/bin/phpize phpize /usr/bin/phpize83 82
            update-alternatives --set phpize /usr/bin/phpize83
            update-alternatives --force --all


            if [ "$ORCA_COVERAGE_ENABLE" = "TRUE" ]; then
              # Installing xdebug.
                pecl install xdebug

              # Adding Configuration
               docker-php-ext-enable xdebug
               echo "zend_extension=/usr/lib/php83/modules/xdebug.so" >> /etc/php83/php.ini
               echo xdebug.mode=coverage > /etc/php83/php.ini
            fi

            apk update && apk upgrade \
              && apk add --no-cache --virtual .build-deps --update linux-headers \
              $PHPIZE_DEPS \
              lsb-release \
              wget \
              unzip \
              gpg \
              libgd \
              bash \
              jq \
              git \
              ca-certificates

            apk del php81-sodium libsodium -r
            apk cache clean
            apk update && apk upgrade && apk add php83-sodium

            php -v

            echo 'memory_limit = 2048M' >> /etc/php83/php.ini

        fi
        # Override the default PHP version provided by the container to PHP 8.2.
        if [ "$JENKINS_PHP_VERSION" = 8.2 ]; then
          # Download php82
          apk update && apk add php82 php82-cli php82-common \
             php82-zip php82-gd php82-mbstring php82-tokenizer \
             php82-curl php82-bcmath php82-xml \
             php82-intl php82-sqlite3 php82-mysqli php82-dev \
             php82-gmp php82-soap php82-sockets \
             php82-phar php82-dom php82-xmlwriter php82-pdo php82-simplexml php82-ctype \
             php82-session php82-pdo_sqlite libcurl php82-pecl-apcu \
             mysql mysql-client sqlite php82-pdo_mysql php82-posix php82-sodium


            update-alternatives --install /usr/local/bin/php php /usr/bin/php82 82
            update-alternatives --set php /usr/bin/php82
            update-alternatives --force --all
            php -v

            # Updating php-config.
            update-alternatives --install /usr/local/bin/php-config php-config /usr/bin/php-config82 82
            update-alternatives --set php-config /usr/bin/php-config82
            update-alternatives --force --all
            php-config --version

            # Updating phpize.
            update-alternatives --install /usr/local/bin/phpize phpize /usr/bin/phpize82 82
            update-alternatives --set phpize /usr/bin/phpize82
            update-alternatives --force --all
            phpize --version

            php -v

            if [ "$ORCA_COVERAGE_ENABLE" = "TRUE" ]; then
              # Installing xdebug.
                pecl install xdebug

              # Adding Configuration
               docker-php-ext-enable xdebug
               echo "zend_extension=/usr/lib/php82/modules/xdebug.so" >> /etc/php82/php.ini
               echo xdebug.mode=coverage > /usr/local/etc/php/conf.d/xdebug.ini
            fi


            echo 'http://dl-cdn.alpinelinux.org/alpine/v3.17/community' >> /etc/apk/repositories
            echo 'http://dl-cdn.alpinelinux.org/alpine/v3.17/main' >> /etc/apk/repositories
            apk update && apk upgrade \
              && apk add --no-cache --virtual .build-deps --update linux-headers \
              $PHPIZE_DEPS \
              lsb-release \
              wget \
              unzip \
              gpg \
              libgd \
              bash \
              jq \
              git \
              ca-certificates

            echo 'memory_limit = 2048M' >> /etc/php82/php.ini

        fi
        php -v
        # Create the test fixture and place the SUT.
        ../orca/bin/ci/install.sh
        ./tests/travis/install.sh
        # Display details about the fixture.
        ../orca/bin/ci/before_script.sh
        # Run the test script.
        ../orca/bin/ci/script.sh
_orca_job: &orca_job
  <<: *orca_steps
_orca_job_allow_failures: &orca_job_allow_failures
  - ignore_failures: true
    <<: *orca_steps
pre_build:
  # php 8.3 tests
  static_code_analysis:
    - args: --env ORCA_JOB=STATIC_CODE_ANALYSIS --env JENKINS_PHP_VERSION=8.3
      <<: *orca_steps
      ignore_failures: true
  strict_deprecated_code_scan:
    - args: --env ORCA_JOB=STRICT_DEPRECATED_CODE_SCAN --env JENKINS_PHP_VERSION=8.3
      <<: *orca_steps
      <<: *creds
      ignore_failures: true
  isolated_test_on_current:
    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT --env JENKINS_PHP_VERSION=8.3
      <<: *orca_steps
      <<: *creds
  integrated_test_on_current:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_CURRENT --env JENKINS_PHP_VERSION=8.3
      <<: *orca_steps
      <<: *creds
  integrated_test_on_prev_minor:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_PREVIOUS_MINOR --env JENKINS_PHP_VERSION=8.3
      <<: *orca_steps
      <<: *creds

  # These tests will be enabled after next major is available
  #  isolated_test_on_next_major_latest_minor_dev:
  #    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_DEV --env JENKINS_PHP_VERSION=8.3
  #      <<: *orca_job
  #  integrated_test_on_next_major_latest_minor_dev:
  #    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_DEV --env JENKINS_PHP_VERSION=8.3
  #      <<: *orca_job
  #  isolated_test_on_next_major_latest_minor_beta_later:
  #    - args: --env ORCA_JOB=ISOLATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_BETA_OR_LATER --env JENKINS_PHP_VERSION=8.3
  #      <<: *orca_job
  #  integrated_test_on_next_major_latest_minor_beta_later:
  #    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_NEXT_MAJOR_LATEST_MINOR_BETA_OR_LATER --env JENKINS_PHP_VERSION=8.3
  #      <<: *orca_job

  # PHP 8.2 tests
#  isolated_test_on_current_php82:
#    - args: --env ORCA_JOB=ISOLATED_TEST_ON_CURRENT --env JENKINS_PHP_VERSION=8.2
#      <<: *orca_steps
#      <<: *creds
#  integrated_test_on_latest_lts_php82:
#    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_LATEST_LTS --env JENKINS_PHP_VERSION=8.2
#      <<: *orca_steps
#      <<: *creds

  # PHP 8.1 tests
  integrated_test_on_latest_eol_major_php81:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_LATEST_EOL_MAJOR
      <<: *orca_job
  integrated_test_on_oldest_supported_php81:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_OLDEST_SUPPORTED
      <<: *orca_job
  integrated_test_on_latest_lts_php81:
    - args: --env ORCA_JOB=INTEGRATED_TEST_ON_LATEST_LTS
      <<: *orca_job

  security_composition_analysis:
    required: true

after_success:
  - steps:
      - echo "Running after success.";
      - cd $ORCA_WORKSPACE && ../orca/bin/travis/after_success.sh

after_failure:
  - steps:
      - echo "Running after failure.";
      - cd $ORCA_WORKSPACE && ../orca/bin/travis/after_failure.sh

notify:
  channel: acsf-team
  on_success: change
  on_failure: change
