<?php

/**
 * @file
 * Contains translatable_menu_link_uri.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\link\LinkItemInterface;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;

/**
 * Implements hook_help().
 */
function translatable_menu_link_uri_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the translatable_menu_link_uri module.
    case 'help.page.translatable_menu_link_uri':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module enables support for translation of link field in menu_link_content entity.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for menu_link_content_form.
 *
 * This piece of code improves the user experience of the module.
 * It hides the link_override field if the user  is working on the default
 * language of the module. If the user is working on a translation,
 * the link field
 * is hidden.
 */
function translatable_menu_link_uri_form_menu_link_content_form_alter(&$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $form_langcode = $form_object->getFormLangcode($form_state);
  $entity_langcode = $form_object->getEntity()->getUntranslated()->language()->getId();

  $form['link']['#access'] = !($form_langcode != $entity_langcode);
  $form['link_override']['#access'] = ($form_langcode != $entity_langcode);

  foreach (Element::children($form['link_override']['widget']) as $widget_index) {
    $widget = &$form['link_override']['widget'][$widget_index];
    if (\Drupal::service('module_handler')->moduleExists('token') && is_array($widget['uri']['#description']) && is_array($widget['uri']['#description']['#items'])) {
      $widget['uri']['#description']['#items'][] = t(
        'Tokens are supported for this field. See the <a href=":token-help">available tokens</a> for more details.',
        [':token-help' => '/admin/help/token']
      );
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function translatable_menu_link_uri_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  $description = t('The regular link field does not support the translation of external links. If you need to translate an off-site link, use this field as an override to support translation. Do <em>not</em> use this for internal Drupal links.');

  // We modify only menu_link_content entity type.
  if ($entity_type->id() == 'menu_link_content') {

    // Add second link field. This one is translatable.
    $fields['link_override'] = BaseFieldDefinition::create('link')
      ->setLabel(t('Translatable External Link Override'))
      ->setDescription($description)
      ->setTranslatable(TRUE)
      ->setRevisionable(TRUE)
      ->setRequired(FALSE)
      ->setSettings([
        'link_type' => LinkItemInterface::LINK_GENERIC,
        'title' => DRUPAL_DISABLED,
      ])
      ->setDisplayOptions('form', [
        'type' => 'link_default',
        'weight' => -2,
      ]);
  }

  return $fields;
}

/**
 * Implements hook_preprocess_menu().
 */
function translatable_menu_link_uri_preprocess_menu(&$variables, $hook) {
  // Let's apply this on menu theme (menu block).
  if ($hook === 'menu' || preg_match('%^menu__%', $hook)) {
    // Iterate through all items in menu tree.
    foreach ($variables['items'] as &$item) {
      translatable_menu_link_uri_iterate_menu($item);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu_levels.
 *
 * Preprocesses menu items child links created with Menu Item Extras module.
 */
function translatable_menu_link_uri_preprocess_menu_levels(&$variables, $hook) {
  // Iterate through all nested items in menu tree.
  foreach ($variables['items'] as &$item) {
    translatable_menu_link_uri_iterate_menu($item);
  }
}

/**
 * Iterate over the menu and check for sublevel menu links.
 */
function translatable_menu_link_uri_iterate_menu(&$item) {
  try {
    if (isset($item['below'])) {
      foreach (array_keys($item['below']) as $key) {
        translatable_menu_link_uri_iterate_menu($item['below'][$key]);
      }
    }
    /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
    $link = $item['original_link'] ?? NULL;

    if ($link instanceof MenuLinkContent) {
      /** @var \Drupal\link\LinkItemInterface $url */
      $url = $link->getEntity()->link_override->first();

      // We inherit options from current (overridden) element.
      $options = $item['url']->getOptions();

      // Never inherit query string.
      unset($options['query']);
      // Never inherit hash string.
      unset($options['fragment']);

      if ($url instanceof LinkItemInterface) {
        $item['url'] = $url->isEmpty() ? $item['url'] : $url->getUrl();
      }

      $moduleHandler = \Drupal::service('module_handler');
      if ($item["url"]->isExternal() && $moduleHandler->moduleExists('token')) {
        $tokenService = \Drupal::token();
        $tokenizedUri = $tokenService->replace($item["url"]->getUri());
        $item['url'] = Url::fromUri($tokenizedUri, $options);
      }

      if (!empty($options)) {
        // Inherit only options that have not been overridden.
        $overridden_options = $item['url']->getOptions();
        $options += $overridden_options;
        $item['url']->setOptions($options);
      }
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('translatable_menu_link_uri')->warning($e->getMessage());
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function translatable_menu_link_uri_entity_base_field_info_alter(&$fields, $entity_type) {
  if (isset($fields['link_override']) && $entity_type->id() === 'menu_link_content') {
    $fields['link_override']->setDisplayConfigurable('form', TRUE);
  }
}
